     1                                  bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
     2                                  ; definim punctul de intrare in programul principal
     3                                  global  start 
     4                                  import fclose msvcrt.dll
     5                                  import fscanf msvcrt.dll
     6                                  import fopen msvcrt.dll
     7                                  import scanf msvcrt.dll
     8                                  import printf msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import gets msvcrt.dll
    11                                  import exit msvcrt.dll
    12                                  extern printf, exit,scanf,fopen,fscanf,fclose,fprintf,gets
    13                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
    14                                  
    15                                  ;8.	Citesc string tastatura, creem fisier string.txt, adaugam in fisier prima data majusculele apoi minusculele invers de cum apar in sir.
    16                                  
    17                                  segment  data use32 class=data ; segmentul de date in care se vor defini variabilele 
    18 00000000 <res 00000064>          s resb 100
    19 00000064 <res 00000064>          sir_M resb 100
    20 000000C8 <res 00000064>          sir_m resb 100
    21 0000012C 737472696E67322E74-     filename db 'string2.txt',0
    21 00000135 787400             
    22 00000138 7700                    mod_acces db 'w',0
    23 0000013A 257300                  format db '%s',0
    24 0000013D 0A00                    spatiu db 0x0A, 0
    25 0000013F FFFFFFFF                descriptor dd -1
    26 00000143 45524F41524500          mesaj db 'EROARE',0
    27                                  segment  code use32 class=code ; segmentul de cod
    28                                  start: 
    29                                      ;gets(buffer)
    30 00000000 68[00000000]                push s
    31 00000005 FF15[00000000]              call [gets]
    32 0000000B 83C404                      add esp,4*1
    33                                      
    34 0000000E BE[00000000]                mov esi,s
    35                                      inv:
    36 00000013 AC                              lodsb
    37 00000014 3C00                            cmp al,0
    38 00000016 7402                            je ies
    39 00000018 EBF9                            jmp inv
    40                                      ies:
    41 0000001A 83EE02                      sub esi,2
    42 0000001D BF[64000000]                mov edi,sir_M
    43 00000022 BB[C8000000]                mov ebx,sir_m
    44                                      bucla:
    45 00000027 FD                              std
    46 00000028 AC                              lodsb
    47 00000029 3C00                            cmp AL,0
    48 0000002B 7419                            JE final
    49 0000002D 3C41                            cmp AL,'A'
    50 0000002F 72F6                            JB bucla
    51 00000031 3C7A                            cmp AL,'z'
    52 00000033 77F2                            JA bucla
    53 00000035 3C5A                            cmp AL,'Z'
    54 00000037 7609                            JBE majuscula
    55 00000039 3C61                            cmp AL,'a'
    56 0000003B 72EA                            JB bucla
    57                                          minuscula:
    58 0000003D 8803                                mov byte[ebx],AL
    59 0000003F 43                                  inc ebx
    60 00000040 EBE5                                JMP bucla
    61                                          majuscula:
    62 00000042 FC                                  cld
    63 00000043 AA                                  stosb
    64 00000044 EBE1                                JMP bucla
    65                                      final:
    66 00000046 C60700                      mov byte [edi],0
    67 00000049 C60300                      mov byte [ebx],0
    68 0000004C 68[64000000]                push sir_M
    69 00000051 FF15[00000000]          call [printf]
    70 00000057 83C404                  add esp, 4
    71 0000005A 68[C8000000]            push sir_m
    72 0000005F FF15[00000000]          call [printf]
    73 00000065 83C404                  add esp, 4
    74                                  
    75                                      ;fopen(filename,mod_acces)
    76 00000068 68[38010000]                push dword mod_acces
    77 0000006D 68[2C010000]                push dword filename
    78 00000072 FF15[00000000]              call [fopen]
    79 00000078 83C408                      add esp,4*2
    80                                      
    81 0000007B 83F800                      cmp EAX,0
    82 0000007E 7467                        JE eroare_fisier
    83 00000080 A3[3F010000]                mov [descriptor],eax
    84                                      
    85 00000085 68[64000000]                push sir_M
    86 0000008A 68[3A010000]                push format
    87 0000008F FF35[3F010000]              push dword[descriptor]
    88 00000095 FF15[00000000]              call [fprintf]
    89 0000009B 83C40C                      add esp,4*3
    90                                      
    91 0000009E 68[3D010000]                push spatiu
    92 000000A3 68[3A010000]                push format
    93 000000A8 FF35[3F010000]              push dword[descriptor]
    94 000000AE FF15[00000000]              call [fprintf]
    95 000000B4 83C40C                      add esp,4*3
    96                                      
    97 000000B7 68[C8000000]                push sir_m
    98 000000BC 68[3A010000]                push format
    99 000000C1 FF35[3F010000]              push dword[descriptor]
   100 000000C7 FF15[00000000]              call [fprintf]
   101 000000CD 83C40C                      add esp,4*3
   102                                      
   103                                      ;fclose(descriptor)
   104 000000D0 FF35[3F010000]              push dword[descriptor]
   105 000000D6 FF15[00000000]              call [fclose]
   106 000000DC 83C404                      add esp,4*1
   107                                      
   108 000000DF 6A00                        push   dword 0 ;se pune pe stiva codul de retur al functiei exit
   109 000000E1 FF15[00000000]          	call   [exit] ;apelul functiei sistem exit pentru terminarea executiei programului
   110                                      
   111                                      eroare_fisier:
   112 000000E7 68[43010000]                push mesaj
   113 000000EC FF15[00000000]              call [printf]
   114 000000F2 83C404                      add esp,4
   115 000000F5 6A00                        push   dword 0 ;se pune pe stiva codul de retur al functiei exit
   116 000000F7 FF15[00000000]          	call   [exit] ;apelul functiei sistem exit pentru terminarea executiei programului
   117                                      
