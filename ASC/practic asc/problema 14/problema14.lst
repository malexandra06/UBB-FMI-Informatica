     1                                  bits 32
     2                                  global start 
     3                                  import fclose msvcrt.dll
     4                                  import fscanf msvcrt.dll
     5                                  import fopen msvcrt.dll
     6                                  import scanf msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import fprintf msvcrt.dll
     9                                  import gets msvcrt.dll
    10                                  import exit msvcrt.dll
    11                                  extern printf, exit, scanf, fopen, fscanf, fclose, fprintf, gets
    12                                  
    13                                  ;Se da fișierul ala "preufung.txt", câte conține un text de maxim 200 caractere, conține litere mici, mari, spatii și puncte. 
    14                                  ;Afiseaza pe ecran pe randuri diferite cuvintele cu nr impar de litere și sa se înlocuiască litera din mijloc cu spatiu
    15                                  
    16                                  segment data use32 class=data
    17 00000000 <res 00000064>          cuv resb 100
    18 00000064 00                      len db 0
    19                                  
    20 00000065 696E7075742E747874-     filename db 'input.txt',0
    20 0000006E 00                 
    21 0000006F 7200                    mod_acces db 'r',0
    22 00000071 FFFFFFFF                descriptor dd -1
    23 00000075 256300                  format_ch db '%c',0
    24 00000078 257300                  format_sir db '%s',0
    25 0000007B 00000000                car dd 0
    26 0000007F 0A00                    newline db 10,0
    27 00000081 45726F6172652E2E2E-     mesaj db 'Eroare...',0
    27 0000008A 00                 
    28                                  segment code use32 class=code
    29                                  start:
    30                                      ;fopen(filename,mod_acces)
    31 00000000 68[6F000000]                push mod_acces
    32 00000005 68[65000000]                push filename
    33 0000000A FF15[00000000]              call [fopen]
    34 00000010 83C408                      add esp,4*2
    35                                      
    36 00000013 83F800                      cmp eax,0
    37 00000016 0F8400010000                je eroare
    38 0000001C A3[71000000]                mov [descriptor],eax
    39 00000021 BF[00000000]                mov edi,cuv
    40                                      bucla:
    41                                          ;fscanf(descriptor,format,c)
    42 00000026 68[7B000000]                    push car
    43 0000002B 68[75000000]                    push format_ch
    44 00000030 FF35[71000000]                  push dword[descriptor]
    45 00000036 FF15[00000000]                  call [fscanf]
    46 0000003C 83C40C                          add esp,4*3
    47                                          
    48 0000003F A0[7B000000]                    mov al,[car]
    49 00000044 AA                              stosb
    50 00000045 3C00                            cmp al,0
    51 00000047 7476                            JE iesi
    52 00000049 3C20                            cmp al,' '
    53 0000004B 7408                            JE next_cuv
    54 0000004D FE05[64000000]                  inc byte[len]
    55 00000053 EBD1                            JMP bucla
    56                                          next_cuv:
    57 00000055 F605[64000000]01                    test byte[len],1
    58 0000005C 7450                                JZ cuv_par
    59 0000005E B800000000                          mov eax,0
    60 00000063 A0[64000000]                        mov al,[len]
    61 00000068 B400                                mov ah,0
    62 0000006A B202                                mov dl,2
    63 0000006C F6F2                                div dl
    64 0000006E B400                                mov ah,0
    65 00000070 C680[00000000]20                    mov byte[eax+cuv],' '
    66 00000077 B800000000                          mov eax,0
    67 0000007C A0[64000000]                        mov al,[len]
    68 00000081 C680[00000000]00                    mov byte[cuv+eax],0
    69 00000088 68[00000000]                        push cuv
    70 0000008D 68[78000000]                        push format_sir
    71 00000092 FF15[00000000]                      call [printf]
    72 00000098 83C408                              add esp,4*2
    73                                              
    74 0000009B 68[7F000000]                        push newline
    75 000000A0 68[78000000]                        push format_sir
    76 000000A5 FF15[00000000]                      call [printf]
    77 000000AB 83C408                              add esp,4*2
    78                                              cuv_par:
    79 000000AE BF[00000000]                            mov edi,cuv
    80 000000B3 C605[64000000]00                        mov byte[len],0
    81 000000BA E967FFFFFF                              JMP bucla
    82                                      iesi:
    83 000000BF F605[64000000]01            test byte[len],1
    84 000000C6 743D                                JZ jos
    85 000000C8 B800000000                          mov eax,0
    86 000000CD A0[64000000]                        mov al,[len]
    87 000000D2 B400                                mov ah,0
    88 000000D4 B202                                mov dl,2
    89 000000D6 F6F2                                div dl
    90 000000D8 B400                                mov ah,0
    91 000000DA C680[00000000]20                    mov byte[eax+cuv],' '
    92 000000E1 B800000000                          mov eax,0
    93 000000E6 A0[64000000]                        mov al,[len]
    94 000000EB C680[00000000]00                    mov byte[cuv+eax],0
    95 000000F2 68[00000000]                        push cuv
    96 000000F7 68[78000000]                        push format_sir
    97 000000FC FF15[00000000]                      call [printf]
    98 00000102 83C408                              add esp,4*2
    99                                              
   100                                           jos:
   101                                      ;fclose(descriptor)
   102 00000105 FF35[71000000]              push dword[descriptor]
   103 0000010B FF15[00000000]              call[fclose]
   104 00000111 83C404                      add esp,4
   105                                      
   106                                      
   107 00000114 6A00                        push dword 0
   108 00000116 FF15[00000000]              call [exit]
   109                                      eroare:
   110 0000011C 68[81000000]                push mesaj
   111 00000121 FF15[00000000]              call [printf]
   112 00000127 83C404                      add esp,4
   113 0000012A 6A00                        push dword 0
   114 0000012C FF15[00000000]              call [exit]
   115                                  
   116                                     
