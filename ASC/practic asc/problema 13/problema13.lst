     1                                  bits 32
     2                                  global start 
     3                                  import fclose msvcrt.dll
     4                                  import fscanf msvcrt.dll
     5                                  import fopen msvcrt.dll
     6                                  import scanf msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import fprintf msvcrt.dll
     9                                  import gets msvcrt.dll
    10                                  import exit msvcrt.dll
    11                                  extern printf, exit, scanf, fopen, fscanf, fclose, fprintf, gets
    12                                  
    13                                  ;13.	Se citeste de la tastatura un cuvant (sir de caractere de maxim 20 de caractere) si un numar reprezentat pe un octet.
    14                                  ;Daca numarul este impar se cere criptarea cuvantului prin adunarea la fiecare caracter a numarului citit modulo 20. Daca numarul este par se cere criptarea cuvantului prin adaugarea dupa fiecare consoana a gruparii
    15                                  
    16                                  segment data use32 class=data
    17 00000000 <res 000000C8>          criptat resb 200
    18 000000C8 <res 00000064>          a resb 100
    19 0000012C 257300                  format_sir db '%s',0
    20 0000012F 00000000                n dd 0
    21 00000133 257500                  format_nr db '%u',0
    22 00000136 6165696F7500            vocale db 'aeiou',0
    23                                  segment code use32 class=code
    24                                  start:
    25 00000000 68[C8000000]                push a 
    26 00000005 68[2C010000]                push format_sir
    27 0000000A FF15[00000000]              call [scanf]
    28 00000010 83C408                      add esp,4*2
    29                                      
    30 00000013 68[2F010000]                push n
    31 00000018 68[33010000]                push format_nr
    32 0000001D FF15[00000000]              call [scanf]
    33 00000023 83C408                      add esp,4*2
    34                                      
    35 00000026 BE[C8000000]                mov esi,a 
    36 0000002B BF[00000000]                mov edi,criptat
    37 00000030 F605[2F010000]01            test byte[n],1
    38 00000037 7415                        JZ par
    39 00000039 B400                        mov ah,0
    40 0000003B A0[2F010000]                mov al,[n]
    41 00000040 B214                        mov dl,20
    42 00000042 F6F2                        div dl
    43                                      bucla:
    44 00000044 AC                              lodsb
    45 00000045 3C00                            cmp al,0
    46 00000047 7423                            je iesi
    47 00000049 00E0                            add al,ah
    48 0000004B AA                              stosb
    49 0000004C EBF6                            JMP bucla
    50                                      par:
    51 0000004E AC                              lodsb
    52 0000004F 3C00                            cmp al,0
    53 00000051 7419                            je iesi
    54 00000053 AA                              stosb
    55 00000054 B905000000                      mov ecx,5
    56 00000059 BB[36010000]                    mov ebx,vocale
    57                                          compar:
    58 0000005E 3A03                                cmp al,byte[ebx]
    59 00000060 7408                                JE nu_e_consoana
    60 00000062 43                                  inc ebx
    61 00000063 E2F9                            loop compar
    62 00000065 0470                            add al,'p'
    63 00000067 AA                              stosb
    64 00000068 EBE4                            jmp par
    65                                          nu_e_consoana:
    66 0000006A EBE2                                jmp par
    67                                      iesi:
    68 0000006C 68[00000000]                push criptat
    69 00000071 68[2C010000]                push format_sir
    70 00000076 FF15[00000000]              call [printf]
    71 0000007C 6A00                        push dword 0
    72 0000007E FF15[00000000]              call [exit]
    73                                  
    74                                     
